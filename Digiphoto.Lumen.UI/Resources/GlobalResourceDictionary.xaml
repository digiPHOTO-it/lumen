<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:lumC="clr-namespace:Digiphoto.Lumen.UI.Converters"
					xmlns:lumP="clr-namespace:Digiphoto.Lumen.UI.Pubblico"
                    xmlns:eff="clr-namespace:Digiphoto.Lumen.Windows.Media.Effects;assembly=Digiphoto.Lumen.Imaging.Wic"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:model="clr-namespace:Digiphoto.Lumen.Model;assembly=Digiphoto.Lumen.Model"                 
                    >

	<lumC:ImageSourceConverter x:Key="imageSourceConverter" />
    <lumC:PercentualeConverter x:Key="percentualeConverter" />
	<lumC:EnabledValidationMultiConverter x:Key="enabledValidationMultiConverter" />
	<lumC:BoolVisibilityConverter x:Key="booleanToVisibilityConverter"/>
	<lumC:BoolInverterConverter x:Key="boolInverterConverter" />
    <lumC:RectangleSizeConverter x:Key="rectangleSizeConverter" />
    <lumC:BoolIsNullConverter x:Key="boolIsNullConverter" />
    <lumC:StatoMasterizzazioneVisibilityConverter x:Key="statoMasterizzazioneVisibilityConverter" />
    <lumC:GrigliaImageConverter x:Key="grigliaImageConverter" />
	<lumC:FasiDelGiornoConverter x:Key="fasiDelGiornoConverter" />

    <eff:GrayscaleEffect x:Key="grayscaleEffect" Factor="0.1" />

	<!-- Template per visualizzare ogni elemento della lista. In pratica ogni entità "Fotografia" -->
    <DataTemplate x:Key="fotografiaDataTemplate" DataType="{x:Type model:Fotografia}" >

		<Border BorderBrush="WhiteSmoke" BorderThickness="1" CornerRadius="6" Margin="0,0,2,2">

            <Grid x:Name="fotoGrid">

                <!-- Questa è l'immagine vera con la foto -->
				<Image Stretch="Uniform" x:Name="fotoImage" Panel.ZIndex="4">
					<Image.Source>
						<MultiBinding Converter="{StaticResource grigliaImageConverter}" Mode="OneWay">
							<Binding Path="." />
							<Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}"/>
						</MultiBinding>
					</Image.Source>
				</Image>

				<!-- Pallino "I" con le informazioni -->
				<Image 	Width="16" Panel.ZIndex="50"
				        HorizontalAlignment="Left"
						VerticalAlignment="Bottom"
						Margin="4,0,0,4">

                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=didascalia, Converter={StaticResource boolIsNullConverter}, Mode=OneWay}" Value="True" >
                                    <Setter Property="Source" Value="/Digiphoto.Lumen.UI;component/Resources/info-16x16.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=didascalia, Converter={StaticResource boolIsNullConverter}, Mode=OneWay}" Value="False" >
                                    <Setter Property="Source" Value="/Digiphoto.Lumen.UI;component/Resources/info-16x16_v.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>

                    <Image.ToolTip>
                        <TextBlock >
                            <TextBlock.Text>
                                <MultiBinding StringFormat="Num = {0}&#x0a;Gio =  {1:dd/MM/yy}&#x0a;Ope = {2}&#x0a;- - - - -&#x0a;Fas = {3}&#x0a;Did = {4}&#x0a;Eve = {5}&#x0a;Time = {6}">
                                    <Binding Path="numero" />
                                    <Binding Path="giornata" />
                                    <Binding Path="fotografo.id" />
                                    <Binding Path="faseDelGiorno" Converter="{StaticResource fasiDelGiornoConverter}" />
                                    <Binding Path="didascalia" />
                                    <Binding Path="evento.descrizione" FallbackValue="" />
                                    <Binding Path="dataOraAcquisizione" />
                                </MultiBinding>
                            </TextBlock.Text>
                            
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding Path=DataContext.commandVedereAncoraInfoImg}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                        </TextBlock>
                    </Image.ToolTip>
                </Image>

                <!-- Icona Mi Piace / Non mi piace -->
				<Image 	Width="16" Panel.ZIndex="50"
					HorizontalAlignment="Right"
					VerticalAlignment="Bottom"
					Margin="0,0,24,4"
				>
                    <Image.ToolTip >
                        <TextBlock >
                            <TextBlock.Text>
                                <MultiBinding StringFormat="Mi piace {0}">
                                    <Binding Path="miPiace" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </Image.ToolTip>

                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=miPiace, Mode=OneWay}" Value="True" >
                                    <Setter Property="Source" Value="/Digiphoto.Lumen.UI;component/Resources/foto-mi-piace-16x16.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=miPiace, Mode=OneWay}" Value="False" >
                                    <Setter Property="Source" Value="/Digiphoto.Lumen.UI;component/Resources/foto-non-mi-piace-16x16.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <!-- Icona per evidenziare che l'immagine è già stata stampata -->
				<Image 	Width="16" Panel.ZIndex="50"
					HorizontalAlignment="Right"
					VerticalAlignment="Bottom"
					Margin="0,0,4,4"
				>
                    <Image.ToolTip>
                        <TextBlock >
                            <TextBlock.Text>
                                <MultiBinding StringFormat="Stampate {0} copie">
                                    <Binding Path="contaStampata" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </Image.ToolTip>
					
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
						<Setter Property="Source" Value="/Digiphoto.Lumen.UI;component/Resources/foto-gia-stampata-16x16.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=contaStampata, Mode=OneWay}" Value="0" >
                                    <Setter Property="Visibility" Value="Hidden" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
			
                <!-- IL font con cui stampo il numero, ha grandezza proporzionale al canvas . Per ora uso 8% della grandezza del contenitore della foto -->
				<Label x:Name="NumFoto"  Panel.ZIndex="50"
                       Content="{Binding Path=etichetta}"    
					   VerticalAlignment="Top" HorizontalAlignment="Right"
                       Margin="0,4,4,0"
                       FontSize="{Binding ActualHeight, ElementName=fotoGrid, FallbackValue=15, Converter={StaticResource percentualeConverter},ConverterParameter=8;15}"
                       Background="Orange" 
                       Foreground="Black" />

            </Grid>

        </Border>

    </DataTemplate>

    <!-- 
		Per colorare l'elemento selezionato di una listbox ci vogliono questi 20 Kg di codice: 
		Questo stile colora di rosso l'elemento selezionato di una lista, anche quando la lista perde il fuoco.
		Ho dovuto riscriverlo perché con windows10 il precedente sistema di definizione del colore selezionato,
		non funzionava più.
	-->
		
    <Style TargetType="{x:Type ListBoxItem}" x:Key="listBoxItemEvidenziatoStyle">
        <Setter Property="Foreground" Value="DarkBlue" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive"
                                            Value="False" />
                                <Condition Property="IsSelected"
                                            Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="OrangeRed" />
                            <Setter Property="Foreground" Value="White" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive"
                                            Value="True" />
                                <Condition Property="IsSelected"
                                            Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="Bd"
                                    Value="OrangeRed" />
                            <Setter Property="Foreground" Value="White" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   

    <Style x:Key="darkControlStyle" TargetType="{x:Type Control}">
		<!--
		<Setter Property="Background" Value="{DynamicResource darkGradientBackground}" />
		-->
		<Setter Property="Background" Value="#292929" />  <!-- grigio molto scuro s-->
		<Setter Property="Foreground" Value="Cyan" />
	</Style>

	<Style TargetType="Panel">
		<Setter Property="Background" Value="Orchid" />
	</Style>


	<Style x:Key="contenitoreStyle" TargetType="Control">
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush EndPoint="0,1">

					<GradientStop Color="#021128" Offset="1.0" />

					<GradientStop Color="#3f4754" Offset="0.2" />

				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

	</Style>

	
	<Style x:Key="baseListBoxStyle" TargetType="{x:Type ListBox}">
		<Setter Property="Background" Value="Gray" />
		<Setter Property="Foreground" Value="WhiteSmoke" />
	</Style>

	<Style TargetType="{x:Type Control}" x:Key="buttonBaseStyle">
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush  StartPoint="0,0" EndPoint="0,1" >
					<GradientStop Color= "LightBlue" Offset="0" />
					<GradientStop Color= "WhiteSmoke" Offset="0.5" />
					<GradientStop Color= "Cyan" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="Gray" />
				<Setter Property="Opacity" Value="0.5" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="True">
				<Setter Property="BorderBrush" Value="Green" />
			</Trigger>
		</Style.Triggers>
	</Style>
	

	<Style TargetType="{x:Type RadioButton}" >
		<Setter Property="Foreground" Value="LightBlue" />
	</Style>

	<Style x:Key="tabControlProspettiveStyle" TargetType="{x:Type TabControl}" BasedOn="{StaticResource darkControlStyle}">
	</Style>

	<Style TargetType="{x:Type ToolBarTray}">
		<Setter Property="Background" Value="{DynamicResource darkGradientBackground}" />
	</Style>
	<Style TargetType="{x:Type ToolBar}">
		<Setter Property="Background" Value="Gold" />
	</Style>
	
	<LinearGradientBrush x:Key="darkGradientBackground" StartPoint="0,0" EndPoint="1,1" >
		<GradientStop Color= "Black" Offset="0.4" />
		<GradientStop Color= "DarkGray" Offset="1" />
	</LinearGradientBrush>
	
	<LinearGradientBrush x:Key="BlackBG" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FF0F0F0F" Offset="0" />
		<GradientStop Color="#FF000000" Offset="0.4"/>
		<GradientStop Color="#FF747C8D" Offset="0.6"/>
		<GradientStop Color="#FFE5E7FA" Offset="1"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="tabItemGradient" StartPoint="0,0" EndPoint="1,1" >
		<GradientStop Color="#FF0F0F0F" Offset="0"/>
		<GradientStop Color="#FF747C8D" Offset="1"/>
	</LinearGradientBrush>

	<Style TargetType="{x:Type Control}">
		<Setter Property="FontSize" Value="12" />
	</Style>
	
	<Style TargetType="{x:Type GroupBox}">
		<Setter Property="Foreground" Value="WhiteSmoke" />
		<!--
		<Setter Property="Padding" Value="2,4" />
		-->
	</Style>

	<Style TargetType="{x:Type Label}">
		<Setter Property="Foreground" Value="WhiteSmoke" />
	</Style>

	<Style x:Key="globalPanelGradientStyle" TargetType="Panel" BasedOn="{StaticResource {x:Type Panel}}">
		<Setter Property="Background" Value="{StaticResource BlackBG}"  />
	</Style>
	
	<!-- Errori di validazione -->
	<Style TargetType="{x:Type TextBox}">
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Margin" Value="0,2,40,2" />
		<Setter Property="Validation.ErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<DockPanel LastChildFill="true">
						<Border Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                                    ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
							<TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white">
							</TextBlock>
						</Border>
						<AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
							<Border BorderBrush="red" BorderThickness="1" />
						</AdornedElementPlaceholder>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type CheckBox}">
		<Setter Property="Foreground" Value="WhiteSmoke" />
	</Style>


    <SolidColorBrush x:Key="GroupBoxBorderBrush" Color="Green"/>
    <Style TargetType="Expander">
        <Setter Property="Foreground" Value="LightGreen" />
        <Setter Property="BorderBrush" Value="{StaticResource GroupBoxBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>


    <!-- I pulsanti ad incastro, quando sono pigiati, voglio cambiare colore per renderli più evidenti-->
    <ControlTemplate TargetType="ToggleButton" x:Key="mioToggleButtonTemplate">
        <Border CornerRadius="3" Background="{TemplateBinding Background}">
            <ContentPresenter Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush" Value="Red" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                            <GradientStop Color="AntiqueWhite" Offset="0"/>
                            <GradientStop Color="Red" Offset="0.2"/>
                            <GradientStop Color="#FFFFC934" Offset="0.84"/>
                            <GradientStop Color="AntiqueWhite" Offset="0.92"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="mioToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource buttonBaseStyle}">
        <Setter Property="Template" Value="{StaticResource mioToggleButtonTemplate}" />
    </Style>

    <Style TargetType="DataGridRow">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="OrangeRed"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="OrangeRed"/>
        </Style.Resources>
    </Style>


	<Style x:Key="coperturaRispettoStyle" TargetType="Rectangle">
		<Setter Property="StrokeThickness" Value="2" />
		<Setter Property="Stroke" Value="White" />
		<Setter Property="Fill" Value="Black" />
		<Setter Property="Opacity" Value="0.8" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="StrokeDashArray" Value="4 8" />
		<Setter Property="Panel.ZIndex" Value="25" />  <!-- deve stare sopra l'immagine ma sotto alla label del numero -->
	</Style>

</ResourceDictionary>