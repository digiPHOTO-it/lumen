<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:lumC="clr-namespace:Digiphoto.Lumen.UI.Converters"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:model="clr-namespace:Digiphoto.Lumen.Model;assembly=Digiphoto.Lumen.Model"                 
                    >
	<ResourceDictionary.MergedDictionaries>
<!--		
		<ResourceDictionary Source="ExpanderDictionary.xaml" />
-->		
	</ResourceDictionary.MergedDictionaries>

	<lumC:ImageSourceConverter x:Key="imageSourceConverter" />
    <lumC:PercentualeConverter x:Key="percentualeConverter" />
	<lumC:EnabledValidationMultiConverter x:Key="enabledValidationMultiConverter" />
	<BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
    <lumC:RectangleSizeConverter x:Key="rectangleSizeConverter" />

    
    <Style TargetType="{x:Type Rectangle}" x:Key="styleRectCopriA">

        <Setter Property="Fill" Value="Black" />
        <Setter Property="Opacity" Value="0.7" />
        
        <Setter Property="Canvas.Left">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="a;L">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Canvas.Top">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="a;T">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Width">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="a;W">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Height">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="a;H">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="{x:Type Rectangle}" x:Key="styleRectCopriB">

        <Setter Property="Fill" Value="Black" />
        <Setter Property="Opacity" Value="0.7" />

        <Setter Property="Canvas.Left">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="b;L">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Canvas.Top">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="b;T">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Width">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="b;W">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Height">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource rectangleSizeConverter}" ConverterParameter="b;H">
                    <Binding Path="DataContext.ratioAreaStampabile" RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" />
                    <Binding Path="Width" ElementName="imageFotografia"/>
                    <Binding Path="Height" ElementName="imageFotografia"/>
                    <Binding Path="ActualWidth" ElementName="imageFotografia"/>
                    <Binding Path="ActualHeight" ElementName="imageFotografia"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Template per visualizzare ogni elemento della lista. In pratica ogni entità "Fotografia" -->
    <DataTemplate x:Key="fotografiaDataTemplate" DataType="{x:Type model:Fotografia}" >

		<Border BorderBrush="WhiteSmoke" BorderThickness="1" CornerRadius="8" Margin="0,0,2,2" >
            
            <Canvas x:Name="fotoCanvas"
                    Height="{Binding  Path=DataContext.dimensioneIconaFoto, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" 
                    Width="{Binding  Path=DataContext.dimensioneIconaFoto, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" >

                <!-- Questa è l'immagine vera con la foto -->
                <Image Source="{Binding Path=imgProvino,Converter={StaticResource imageSourceConverter}}" Stretch="Uniform"  
                       x:Name="imageFotografia"
                       Width="{Binding ActualWidth, ElementName=fotoCanvas}"
                       Height="{Binding ActualHeight, ElementName=fotoCanvas}" />


                <!-- Questo è il rettangolo a) di copertura per taglio area stampabile -->
                <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Style="{StaticResource styleRectCopriA}" />

                <!-- Questo è il rettangolo b) di copertura per taglio area stampabile -->
                <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Style="{StaticResource styleRectCopriB}" />


                <Image 
                    Source="/Digiphoto.Lumen.UI;component/Resources/info-16x16.png" Width="16" Height="16"
                    Canvas.Left="2"
                    Canvas.Bottom="2" >

                    <Image.ToolTip>
                        <TextBlock >
                            <TextBlock.Text>
                                <MultiBinding StringFormat="Num = {0}&#x0a;Gio =  {1:dd/MM/yy}&#x0a;Ope = {2}&#x0a;- - - - -&#x0a;Fas = {3}&#x0a;Did = {4}&#x0a;Eve = {5}&#x0a;Time = {6}">
                                    <Binding Path="numero" />
                                    <Binding Path="giornata" />
                                    <Binding Path="fotografo.id" />
                                    <Binding Path="faseDelGiornoString" />
                                    <Binding Path="didascalia" />
                                    <Binding Path="evento.descrizione" FallbackValue="" />
                                    <Binding Path="dataOraAcquisizione" />
                                </MultiBinding>
                            </TextBlock.Text>
                            
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding Path=DataContext.commandVedereAncoraInfoImg}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                        </TextBlock>
                    </Image.ToolTip>
                </Image>

                <!-- IL font con cui stampo il numero, ha grandezza proporzionale al canvas . Per ora uso 8% della grandezza del contenitore della foto -->
                <Label Content="{Binding Path=etichetta}"        
                               Canvas.Right="2"
                               Canvas.Top="2"
                               FontSize="{Binding Converter={StaticResource percentualeConverter},ElementName=fotoCanvas,Path=ActualHeight,ConverterParameter=8}"
                               Background="Orange" Foreground="Black" />
            </Canvas>

        </Border>

    </DataTemplate>

    <!-- L'elemento selezionato della lista perde il colore quando non ha il fuoco. Con questo rimetto a posto -->
    <Style TargetType="ListBoxItem">
		<Setter Property="Foreground" Value="DarkBlue" />
        <Style.Resources>
            <!--SelectedItem with focus -->
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red" />
            
            <!--SelectedItem without focus-->
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Orange" Opacity=".6"/>
        </Style.Resources>
    </Style>

	<Style x:Key="darkControlStyle" TargetType="{x:Type Control}">
		<!--
		<Setter Property="Background" Value="{DynamicResource darkGradientBackground}" />
		-->
		<Setter Property="Background" Value="#292929" />  <!-- grigio molto scuro s-->
		<Setter Property="Foreground" Value="Cyan" />
	</Style>

	<Style TargetType="Panel">
		<Setter Property="Background" Value="Orchid" />
	</Style>

	
	<Style TargetType="{x:Type ListBox}">
		<Setter Property="Background" Value="Gray" />
		<Setter Property="Foreground" Value="WhiteSmoke" />
	</Style>

	<Style TargetType="{x:Type ButtonBase}" x:Key="buttonBaseStyle">
<!--		
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush  StartPoint="0,0" EndPoint="0,1" >
					<GradientStop Color= "LightBlue" Offset="0" />
					<GradientStop Color= "SteelBlue" Offset="0.5" />
					<GradientStop Color= "DarkBlue" Offset="0.9" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
-->
	</Style>
	

	<Style TargetType="{x:Type RadioButton}" >
		<Setter Property="Foreground" Value="LightBlue" />
	</Style>

	<Style x:Key="tabControlProspettiveStyle" TargetType="{x:Type TabControl}" BasedOn="{StaticResource darkControlStyle}">
	</Style>

	<Style TargetType="{x:Type ToolBarTray}">
		<Setter Property="Background" Value="{DynamicResource darkGradientBackground}" />
	</Style>
	<Style TargetType="{x:Type ToolBar}">
		<Setter Property="Background" Value="Gold" />
	</Style>
	
	<LinearGradientBrush x:Key="darkGradientBackground" StartPoint="0,0" EndPoint="1,1" >
		<GradientStop Color= "Black" Offset="0.4" />
		<GradientStop Color= "DarkGray" Offset="1" />
	</LinearGradientBrush>
	
	<LinearGradientBrush x:Key="BlackBG" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FF0F0F0F" />
		<GradientStop Color="#FF000000" Offset="0.5"/>
		<GradientStop Color="#FF747C8D" Offset="0.5"/>
		<GradientStop Color="#FFE5E7FA" Offset="1"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="tabItemGradient" StartPoint="0,0" EndPoint="1,1" >
		<GradientStop Color="#FF0F0F0F" Offset="0"/>
		<GradientStop Color="#FF747C8D" Offset="1"/>
	</LinearGradientBrush>

	<Style TargetType="{x:Type Control}">
		<Setter Property="FontSize" Value="12" />
	</Style>
	
	<Style TargetType="{x:Type GroupBox}">
		<Setter Property="Foreground" Value="WhiteSmoke" />
		<!--
		<Setter Property="Padding" Value="2,4" />
		-->
	</Style>

	<Style TargetType="{x:Type Label}">
		<Setter Property="Foreground" Value="WhiteSmoke" />
	</Style>

	<Style x:Key="globalPanelGradientStyle" TargetType="Panel" BasedOn="{StaticResource {x:Type Panel}}">
		<Setter Property="Background" Value="{StaticResource BlackBG}"  />
	</Style>
	
	<!-- Errori di validazione -->
	<Style TargetType="{x:Type TextBox}">
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Margin" Value="0,2,40,2" />
		<Setter Property="Validation.ErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<DockPanel LastChildFill="true">
						<Border Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                                    ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
							<TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white">
							</TextBlock>
						</Border>
						<AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
							<Border BorderBrush="red" BorderThickness="1" />
						</AdornedElementPlaceholder>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type CheckBox}">
		<Setter Property="Foreground" Value="WhiteSmoke" />
	</Style>


    <SolidColorBrush x:Key="GroupBoxBorderBrush" Color="Green"/>
    <Style TargetType="Expander">
        <Setter Property="Foreground" Value="LightGreen" />
        <Setter Property="BorderBrush" Value="{StaticResource GroupBoxBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>


    <!-- I pulsanti ad incastro, quando sono pigiati, voglio cambiare colore per renderli più evidenti-->
    <ControlTemplate TargetType="ToggleButton" x:Key="mioToggleButtonTemplate">
        <Border CornerRadius="3" Background="{TemplateBinding Background}">
            <ContentPresenter Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush" Value="Red" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#FFF3F3F3" Offset="1"/>
                            <GradientStop Color="YellowGreen" Offset="0.307"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="mioToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource buttonBaseStyle}">
        <Setter Property="Template" Value="{StaticResource mioToggleButtonTemplate}" />
    </Style>

</ResourceDictionary>